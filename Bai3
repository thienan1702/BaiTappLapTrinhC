#include <stdio.h>
#include <stdlib.h>

// Hàm Insertion Sort
void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

// Hàm Selection Sort
void selectionSort(int arr[], int n) {
    int i, j, min_idx;

    for (i = 0; i < n - 1; i++) {
        min_idx = i;
        for (j = i + 1; j < n; j++)
            if (arr[j] < arr[min_idx])
                min_idx = j;

        int temp = arr[min_idx];
        arr[min_idx] = arr[i];
        arr[i] = temp;
    }
}

// Hàm Bubble Sort
void bubbleSort(int arr[], int n) {
    int i, j;
    for (i = 0; i < n - 1; i++)
        for (j = 0; j < n - i - 1; j++)
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
}

// Hàm Merge Sort
void merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    // Tạo mảng tạm
    int L[n1], R[n2];

    // Copy dữ liệu vào mảng tạm
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    // Merge các mảng tạm vào mảng chính
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy các phần tử còn lại của L[] và R[], nếu có
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        // Tìm điểm chia
        int m = l + (r - l) / 2;

        // Gọi đệ quy trên nửa đầu tiên và nửa thứ hai
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        // Gộp hai nửa đã sắp xếp
        merge(arr, l, m, r);
    }
}

// Hàm in dãy số nguyên
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() {
    int n;
    printf("Nhap so luong phan tu: ");
    scanf("%d", &n);

    int *arr = (int *)malloc(n * sizeof(int));
    printf("Nhap cac phan tu:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    printf("Chon thuat toan sap xep (1: Insertion Sort, 2: Selection Sort, 3: Bubble Sort, 4: Merge Sort): ");
    int choice;
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            insertionSort(arr, n);
            printf("Day so da sap xep: ");
            printArray(arr, n);
            break;
        case 2:
            selectionSort(arr, n);
            printf("Day so da sap xep: ");
            printArray(arr, n);
            break;
        case 3:
            bubbleSort(arr, n);
            printf("Day so da sap xep: ");
            printArray(arr, n);
            break;
        case 4:
            mergeSort(arr, 0, n - 1);
            printf("Day so da sap xep: ");
            printArray(arr, n);
            break;
        default:
            printf("Lua chon khong hop le!\n");
    }

    free(arr); // Giải phóng bộ nhớ đã cấp phát
    return 0;
}

